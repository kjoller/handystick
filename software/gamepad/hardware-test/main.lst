
main.elf:     filformat elf32-avr

Sektioner:
Idx Navn          St√∏rrelse   VMA       LMA       Filoffs   Just
  0 .data         00000000  00800100  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000c00  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c56  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY

Disassemblering af sektion .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

#define DELAY	500
int main(void) {
	DDRB = (1<<PB5);
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;
  84:	17 b8       	out	0x07, r1	; 7
    uint8_t pin = 0;
  86:	20 e0       	ldi	r18, 0x00	; 0
    
	while (1) {
		if (PINB & (1<<((pin%4)+1))) {
  88:	83 b1       	in	r24, 0x03	; 3
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	32 2f       	mov	r19, r18
  8e:	33 70       	andi	r19, 0x03	; 3
  90:	3f 5f       	subi	r19, 0xFF	; 255
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x18>
  94:	95 95       	asr	r25
  96:	87 95       	ror	r24
  98:	3a 95       	dec	r19
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x14>
  9c:	80 ff       	sbrs	r24, 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
			PORTB |= (1<<PB5);
  a0:	2d 9a       	sbi	0x05, 5	; 5
  a2:	f2 cf       	rjmp	.-28     	; 0x88 <main+0x8>
		} else {
			PORTB &= ~(1<<PB5);
  a4:	2d 98       	cbi	0x05, 5	; 5
            pin++;
  a6:	2f 5f       	subi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	3f e7       	ldi	r19, 0x7F	; 127
  aa:	8c ef       	ldi	r24, 0xFC	; 252
  ac:	9a e0       	ldi	r25, 0x0A	; 10
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
  ba:	e6 cf       	rjmp	.-52     	; 0x88 <main+0x8>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
